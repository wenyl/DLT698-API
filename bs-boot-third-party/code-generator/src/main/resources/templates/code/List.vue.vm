<template>
    <el-form ref="queryFormRef" :model="queryParams" :inline="true">
        <!--
        这是一个搜索条件示例，不需要所有的话，删除这个form，并删除对应的type.ts中的queryParams
        <el-form-item label="用户名" prop="username">
          <el-input
              v-model="queryParams.username"
              placeholder="用户名"
              clearable
              @keyup.enter="handleQuery"
          />
        </el-form-item>
        -->

        <el-form-item>
            <el-button type="primary" @click="handleQuery">搜索</el-button>
            <el-button @click="resetQuery">重置</el-button>
        </el-form-item>
    </el-form>
    <el-card shadow="never">
        <el-button type="success" @click="openDialog()">新增</el-button>
        <el-button type="danger" :disabled="selectIds.length === 0" @click="handleDelete()">删除</el-button
        >
    </el-card>
    <el-table
            :data="tableData"
            v-loading="loading"
            max-height="80vh"
            border
            style="width: 100%"
            table-layout="auto"
            @selection-change="handleSelectionChange">
        <el-table-column type="selection" width="55" />


        <!-- 表格前后都是通用的，这里要定义自己的列信息  -->
#foreach ($column in $entity.columns)
        <el-table-column label="$column.dbColumnComment" prop="$column.javaAttrName"/>
#end

        <el-table-column fixed="right" label="操作" width="150">
            <template #default="scope">
                <el-button size="small" @click="openDialog(scope.row.id)"
                >修改</el-button
                >
                <el-button
                        size="small"
                        type="danger"
                        @click="handleDelete(scope.row.id)"
                >删除</el-button
                >
            </template>
        </el-table-column>
    </el-table>
    <el-pagination
            v-model:current-page="currentPage"
            v-model:page-size="pageSize"
            :page-sizes="[10, 20, 50, 100]"
            :small="small"
            :disabled="disabled"
            :background="background"
            layout="total, sizes, prev, pager, next, jumper"
            prev-text="<上一页"
            next-text="下一页>"
            :total="total"
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
    />


    <!-- 表单弹窗 -->
    <el-dialog
            v-model="dialog.visible"
            :title="dialog.title"
            width="500px"
            @close="closeDialog"
    >
        <el-form
                ref="formRef"
                :model="formData"
                :rules="rules"
                label-width="100px"
        >
#foreach ($column in $entity.columns)
#if($column.javaAttrName != 'createBy' && $column.javaAttrName != 'createBy' && $column.javaAttrName != 'createTime' && $column.javaAttrName != 'updateBy' && $column.javaAttrName != 'updateTime' && $column.javaAttrName != 'id')
        <el-form-item label="$column.dbColumnComment" prop="$column.javaAttrName">
            <el-input v-model="formData.$column.javaAttrName" placeholder="请输入$column.dbColumnComment" />
        </el-form-item>
#end
#end

        </el-form>
        <template #footer>
            <div class="dialog-footer">
                <el-button type="primary" @click="handleSubmit">确 定</el-button>
                <el-button @click="closeDialog">取 消</el-button>
            </div>
        </template>
    </el-dialog>
</template>

<script lang="ts" setup>
    import {reactive, ref, onMounted} from 'vue'
    import {FormInstance} from "element-plus";
    import {QueryParams} from "@/api/${entity.packagePath}/${entity.classAttrName}Type";
    import {${entity.className},${entity.className}Form} from "@/api/${entity.packagePath}/${entity.classAttrName}Type";
    import {list,save,removeById,removeByIds,updateById,queryById} from "@/api/${entity.packagePath}/${entity.classAttrName}Api";
    import {  ElMessage } from "element-plus";

    // 表格数据
    const tableData = ref<${entity.className}[]>();
    // 分页信息
    const currentPage = ref(1)
    const pageSize = ref(10)
    const small = ref(false)
    const background = ref(false)
    const disabled = ref(false)
    const total = ref(0)
    const loading = ref(false);
    // 多选的数据ID
    const selectIds = ref<string>('')
    // 新增/修改弹窗
    const dialog = reactive({
        title: "",
        visible: false,
    });
    // 表单数据
    const formData = reactive<${entity.className}Form>({
#foreach ($column in $entity.columns)
#if(($column.dbColumnType == 'date' || $column.dbColumnType == 'datetime') && $column.javaAttrName != 'createTime' && $column.javaAttrName != 'updateTime')
        $column.javaAttrName:new Date(),
#end
#if(($column.dbColumnType == 'varchar' || $column.dbColumnType == 'text' || $column.dbColumnType == 'longtext') && $column.javaAttrName != 'createBy' && $column.javaAttrName != 'updateBy')
        $column.javaAttrName:undefined,
#end
#if($column.dbColumnType == 'int' || $column.dbColumnType == 'tinyint' || $column.dbColumnType == 'float' || $column.dbColumnType == 'double' || $column.dbColumnType == 'decimal')
        $column.javaAttrName:0,
#end
#end
    });
    const emptyFormData = reactive<${entity.className}Form>({
#foreach ($column in $entity.columns)
#if(($column.dbColumnType == 'date' || $column.dbColumnType == 'datetime') && $column.javaAttrName != 'createTime' && $column.javaAttrName != 'updateTime')
        $column.javaAttrName:new Date(),
#end
#if(($column.dbColumnType == 'varchar' || $column.dbColumnType == 'text' || $column.dbColumnType == 'longtext') && $column.javaAttrName != 'createBy' && $column.javaAttrName != 'updateBy')
        $column.javaAttrName:undefined,
#end
#if($column.dbColumnType == 'int' || $column.dbColumnType == 'tinyint' || $column.dbColumnType == 'float' || $column.dbColumnType == 'double' || $column.dbColumnType == 'decimal')
        $column.javaAttrName:0,
#end
#end
    });
    // 表单校验规则
    const rules = reactive({
#foreach ($column in $entity.columns)
#if($column.javaAttrName != 'id' && $column.javaAttrName != 'createBy' && $column.javaAttrName != 'createTime' && $column.javaAttrName != 'updateBy' && $column.javaAttrName != 'updateTime')
        $column.javaAttrName: [{ required: true, message: "请输入$column.dbColumnComment", trigger: "blur" }],
#end
#end
    });
    // 页面加载
    onMounted(() => {
        handleQuery();
    });
    // 修改每页数据条数
    const handleSizeChange = (val: number) => {
        pageSize.value = val
        queryParams.currentPage= 1
        queryParams.pageSize = val
        handleQuery()
    }

    // 查询参数
    const queryFormRef = ref<FormInstance | null>(null);
    const queryParams = reactive<QueryParams>({
        currentPage: 1,
        pageSize: 10
    })

    //删除事件
    const handleDelete = (id?: any) => {
        if(id){
            removeById(id).then(res=>{
                ElMessage.success("删除成功");
                resetQuery()
            }).finally(() => (loading.value = false));
            return;
        }
        const ids = [selectIds.value].join(",")
        if(!ids){
            ElMessage.error("请选择数据")
            return
        }
        loading.value = true
        removeByIds(ids).then(res=>{
            ElMessage.success("删除成功");
            resetQuery()
        }).finally(() => (loading.value = false));
    }
    // 处理多选
    const handleSelectionChange = (val: any) => {
        selectIds.value = val.map((item:any)=>item.id)
    }

    // 处理查询
    function handleQuery() {
        list(queryParams).then(res=>{
            tableData.value = res.result.records
            total.value = res.result.total
        })
    }
    // 重置查询表单参数
    function resetQuery() {
        queryFormRef.value.resetFields();
        handleQuery();
    }

    // 页码改变
    const handleCurrentChange = (val: number) => {
        queryParams.currentPage = val
        handleQuery()
    }
    // 表单引用
    const formRef = ref<FormInstance | null>(null);
    // 打开表单弹窗
    function openDialog(id?: any) {
        dialog.visible = true;
        if (id) {
            dialog.title = "修改用户";
            queryById(id).then(res=>{
                Object.assign(formData, res.result);
            });
        } else {
            dialog.title = "新增用户";
        }
    }
    // 关闭弹窗
    const closeDialog = ()=>{
        dialog.visible = false;
        resetForm();
    }
    // 重置表单
    const resetForm = ()=>{
        formRef.value.resetFields();
        formRef.value.clearValidate();
        Object.assign(formData, emptyFormData)
    }
    // 提交表单
    const handleSubmit = ()=>{
        formRef.value.validate((valid: any) => {
            if (valid) {
                loading.value = true;
                if (formData.id) {
                    updateById(formData).then(() => {
                        ElMessage.success("修改成功");
                        closeDialog();
                        resetQuery();
                    }).finally(() => (loading.value = false));
                } else {
                    save(formData).then(() => {
                        ElMessage.success("新增成功");
                        closeDialog();
                        resetQuery();
                    }).finally(() => (loading.value = false));
                }
            }
        });
    }
</script>
