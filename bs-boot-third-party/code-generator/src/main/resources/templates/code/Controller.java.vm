package ${entity.basePackage}.${entity.entityPackage}.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import ${entity.basePackage}.${entity.entityPackage}.entity.${entity.className};
import ${entity.basePackage}.${entity.entityPackage}.service.I${entity.className}Service;
import cn.com.wenyl.bs.utils.R;
import com.baomidou.mybatisplus.core.metadata.IPage;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;

@Slf4j
@RestController
@RequestMapping("/${entity.packagePath}/${entity.classAttrName}")
@Api(tags="${entity.tableComment}")
public class ${entity.className}Controller{

    @Resource(name = "${entity.classAttrName}Service")
    private I${entity.className}Service ${entity.classAttrName}Service;

    @PostMapping("/save")
    @ApiOperation(value="${entity.tableComment}-保存", notes="${entity.tableComment}-保存")
    public R<?> save(@RequestBody ${entity.className} entity){
        ${entity.classAttrName}Service.save(entity);
        return R.ok();
    }

    @DeleteMapping(value = "/removeById")
    @ApiOperation(value="${entity.tableComment}-根据ID删除", notes="${entity.tableComment}-根据ID删除")
    public R<?> removeById(@RequestParam(name="id") String id) {
        ${entity.classAttrName}Service.removeById(id);
        return R.ok("删除成功!");
    }

    @DeleteMapping(value = "/removeByIds")
    @ApiOperation(value="${entity.tableComment}-根据ID批量删除", notes="${entity.tableComment}-根据ID批量删除")
    public R<?> removeByIds(@RequestParam(name="ids") String ids) {
        ${entity.classAttrName}Service.removeByIds(Arrays.asList(ids.split(",")));
        return R.ok("批量删除成功!");
    }

    @RequestMapping(value = "/updateById", method = {RequestMethod.PUT,RequestMethod.POST})
    @ApiOperation(value="${entity.tableComment}-根据ID更新", notes="${entity.tableComment}-根据ID更新")
    public R<?> updateById(@RequestBody ${entity.className} entity){
        ${entity.classAttrName}Service.updateById(entity);
        return R.ok();
    }

    @GetMapping(value = "/queryById")
    @ApiOperation(value="${entity.tableComment}-通过id查询", notes="${entity.tableComment}-通过id查询")
    public R<${entity.className}> queryById(@RequestParam(name="id") String id) {
        ${entity.className} entity = ${entity.classAttrName}Service.getById(id);
        if(entity==null) {
            return R.error("未找到对应数据");
        }
        return R.ok(entity);
    }

    @GetMapping(value = "/list")
    @ApiOperation(value="${entity.tableComment}-分页查询", notes="${entity.tableComment}-分页列表查询")
    public R<IPage<${entity.className}>> queryPageList(
                                                       ${entity.className} ${entity.classAttrName},
                                                       @RequestParam(name="currentPage", defaultValue="1") Integer currentPage,
                                                       @RequestParam(name="pageSize", defaultValue="10") Integer pageSize,
                                                       HttpServletRequest req) {
        LambdaQueryWrapper<${entity.className}> queryWrapper = Wrappers.lambdaQuery(${entity.classAttrName});
        Page<${entity.className}> page = new Page<>(currentPage, pageSize);
        IPage<${entity.className}> pageList = ${entity.classAttrName}Service.page(page,queryWrapper);
        return R.ok(pageList);
    }
}
